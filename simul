#include <iostream>
#include <queue>
#include <vector>

class Task {
public:
    int id;
    int priority;
    
    Task(int id, int priority) : id(id), priority(priority) {}
    
    bool operator<(const Task& other) const {
        return priority < other.priority;
    }
};

void processTasks(std::priority_queue<Task>& tasks) {
    while (!tasks.empty()) {
        Task t = tasks.top();
        tasks.pop();
        std::cout << "Processing task with ID: " << t.id << " and priority: " << t.priority << std::endl;
    }
}

int main() {
    std::priority_queue<Task> tasks;

    tasks.push(Task(1, 3));
    tasks.push(Task(2, 5));
    tasks.push(Task(3, 1));
    tasks.push(Task(4, 4));
    tasks.push(Task(5, 2));

    processTasks(tasks);

    return 0;
}
